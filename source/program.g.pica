; Example PICA200 geometry shader
.gsh point c0
;Types of geometry shaders: point, variable-sized primitive and fixed-size primitive

; Uniforms
.fvec projection[4]
.ivec unif_loop_i0
.ivec unif_loop_i1

; Constants
.constf myconst(0.0, 1.0, -1.0, 0.5)
.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones
.alias  half  myconst.wwww

.constf myconst2(0.01, 0.0, 0.0, 0.0)

.constf initialTrianglePos(0.5, 1.0, 0.5, 1.0)
.constf offsetPixTriV1(-0.5, -1.0, 0, 0)
.constf offsetPixTriV2(0.5, -1.0, 0, 0)
.constf orange(1.0, 0.77, 0.02, 1.0)

; Outputs - this time the type *is* used
.out outpos position
.out outclr color

; Inputs: we will receive the following inputs:
; v0-v1: position/color of the first vertex
; v2-v3: position/color of the second vertex
; v4-v5: position/color of the third vertex
; SUMMARY: vX where X is even (parell) -> position, if X is odd -> color

.entry gmain
.proc gmain
	mov r15, offsetPixTriV1
	mov r14, offsetPixTriV2

	mov r3, initialTrianglePos ;tmpPos
	mov r4, myconst.yxxx ;tmpDisplacementX
	mov r5, myconst.xyxx ;tmpDisplacementY
	for i0 ; 0->199
		mov r0, r3
		for i1 ; 0->239
			;set vertex positions
			add r1, r0, r15
			add r2, r0, r14
			;set solid color
			mov r9, orange
			call emit_triangle_solid_color
			add r0, r0, r5
		.end
		add r3, r3, r4
	.end

	for i0 ; 0->199
		mov r0, r3
		for i1 ; 0->239
			;set vertex positions
			add r1, r0, r15
			add r2, r0, r14
			;set solid color
			mov r9, orange
			call emit_triangle_solid_color
			add r0, r0, r5
		.end
		add r3, r3, r4
	.end

	; We're finished
	end
.end

; Subroutine
; Inputs:
;   r0: vertex 1 position 
;   r1: vertex 2 position
;   r2: vertex 3 position
;	r9: solid color
.proc emit_triangle_solid_color
	; Emit the first vertex
	setemit 0
	mov r8, r0
	call process_vertex
	emit

	; Emit the second vertex
	setemit 1
	mov r8, r1
	call process_vertex
	emit

	; Emit the third vertex and finish the primitive
	setemit 2, prim
	mov r8, r2
	call process_vertex
	emit
.end

; Subroutine
; Inputs:
;   r8: vertex position
;   r9: vertex color
.proc process_vertex
	; outpos = projectionMatrix * r8
	dp4 outpos.x, projection[0], r8
	dp4 outpos.y, projection[1], r8
	dp4 outpos.z, projection[2], r8
	dp4 outpos.w, projection[3], r8

	; outclr = r9
	mov outclr, r9
.end
