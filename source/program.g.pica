; Example PICA200 geometry shader
.gsh point c0
;Types of geometry shaders: point, variable-sized primitive and fixed-size primitive

; Uniforms
.fvec projection[4]
.ivec unif_loop_i0
.ivec unif_loop_i1
.ivec unif_loop_i2
.ivec unif_loop_i3

; Outputs - this time the type *is* used
.out outpos position
.out outclr color

; Global constants
.constf myconst(0.0, 1.0, -1.0, 0.5)
.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones
.alias  half  myconst.wwww

.constf iResolution(400.0, 240.0, 0, 0)
.constf iResolutionInverse(0.0025, 0.004166666666666667, 1, 1)

.constf initialTrianglePos(0.5, 1.0, 0.5, 1.0)

; Shader constants
.constf shaderConst1(1.666666667, 0, 0, 0)
.constf shaderConst2(0, 0, -3, 0)
.constf shaderConst3(0.01, 0.01, 0.01, 2.0)

; port of https://www.shadertoy.com/view/ldtGD4 by nicoptere
; in vec2 fragCoord -> r15.xy (readonly)
; out vec4 fragColor -> r9
.proc mainImage
	; r0 -> vec2 uv
	; r1 -> vec3 pos
	; r2 -> vec3 dir
	; r3 -> vec3 ip
	; r4 -> float t
	; r5 -> float temp
	
	;vec2 uv = ( fragCoord.xy / iResolution.xy ) * 2.0 - 1.0;
	mul r0, r15, r13
	add r0, r0, r0
	add r0, r0, -r14.yyyy
	;uv.x *= iResolution.x / iResolution.y;
	mov r1, shaderConst1
	mul r0.x, r0.x, r1.x
	;vec3 pos = vec3( 0.,0.,-3.);
	mov r1, shaderConst2
	;vec3 dir = normalize( vec3( uv, 1. ) );
	mov r2, r0
	mov r2.z, r14.y ; w unused
	mov r10, r2
	call normalize3 ; result in r11
	mov r2, r11

	;float t = 0.0;
	mov r4, myconst.xxxx
	;for( int i = 0; i < 32; i++) {
	for i2
		;ip = pos + dir * t;
		mov r4.yz, r4.xx ; expand float to "const vec3"
		mad r3, r4, r2, r1
		;float temp = sdf( ip );
		mov r10, r3
		call sdf
		mov r5, r11
		;if( temp < 0.01 ) break; -> if ( 0.01 > temp )
		cmp shaderConst3, gt, gt, r5 ; cmp uses the x and y components to do the comparison
		breakc cmp.x
		;t += temp;
		add r4.x, r4.x, r5.x
	.end
	mov r9, r3
	mov r9.w, ones
.end

; Subroutine
; Inputs:
;   r10: vector(?)
; Destroys:
;	r11, r12
; Outputs:
;	r11: float distance
.proc sdf
	call length3
	mov r9, shaderConst3
	;add r11, r11, -r9.wwww ;
	add r11, r11, -r14.xxxx ; only .x should be necessary
.end

; Subroutine
; Inputs:
;   r10: vector (?)
; Destroys:
;	r11, r12
; Outputs:
;	r11: float length
.proc length3
	mul r11, r10, r10
	add r12.x, r11.x, r11.y
	add r12.x, r12.x, r11.z
	rsq r12, r12
	rcp r11, r12
.end

; Subroutine
; Inputs:
;   r10: the vec3 to normalize in xyz
; Destroys:
;	r11, r12
; Outputs:
;	r11
.proc normalize3
	;mov r11, r10
	mul r11, r10, r10
	;mul r11.x, r11.x, r11.x
	;mul r11.y, r11.y, r11.y
	;mul r11.z, r11.z, r11.z
	add r12.x, r11.x, r11.y
	add r12.x, r12.x, r11.z
	;mov r11.x, r11.w
	rsq r12, r12
	mul r11, r10, r12
.end

;------------------------------------------------------------------------------

; Inputs: we will receive the following inputs:
; v0-v1: position/color of the first vertex
; v2-v3: position/color of the second vertex
; v4-v5: position/color of the third vertex
; SUMMARY: vX where X is even (parell) -> position, if X is odd -> color
.entry gmain
.proc gmain
	; registers in the following lines should not be used in mainImage
	mov r15, initialTrianglePos
	mov r14, myconst
	mov r13, iResolutionInverse; iResolution
	
	for i0 ; 0->199
		mov r15.y, r14.y ; set y back to 1.0
		for i1 ; 0->239
			call mainImage
			;calculate remaining vertex positions
			add r11, r15, -r14.wyxx ; -0.5, -1.0, 0, 0
			add r10, r15, r14.wzxx ; 0.5, -1.0, 0, 0
			call emit_triangle_solid_color
			add r15, r15, r14.xyxx ; 0, 1, 0, 0
			nop ; crashes on hardware without dez nops
		.end
		nop
		add r15, r15, r14.yxxx ; 1, 0, 0, 0
	.end

	for i0 ; 0->199
		mov r15.y, r14.y ; set y back to 1.0
		for i1 ; 0->239
			call mainImage
			;calculate remaining vertex positions
			add r11, r15, -r14.wyxx ; -0.5, -1.0, 0, 0
			add r10, r15, r14.wzxx ; 0.5, -1.0, 0, 0
			call emit_triangle_solid_color
			add r15, r15, r14.xyxx ; 0, 1, 0, 0
			nop
		.end
		nop
		add r15, r15, r14.yxxx ; 1, 0, 0, 0
	.end
	end
.end

; Subroutine
; Inputs:
;   r15: vertex 1 position 
;   r11: vertex 2 position
;   r10: vertex 3 position
;	r9: solid color
.proc emit_triangle_solid_color
	; Emit the first vertex
	setemit 0
	mov r8, r15
	call process_vertex
	emit

	; Emit the second vertex
	setemit 1
	mov r8, r11
	call process_vertex
	emit

	; Emit the third vertex and finish the primitive
	setemit 2, prim
	mov r8, r10
	call process_vertex
	emit
.end

; Subroutine
; Inputs:
;   r8: vertex position
;   r9: vertex color
.proc process_vertex
	; outpos = projectionMatrix * r8
	dp4 outpos.x, projection[0], r8
	dp4 outpos.y, projection[1], r8
	dp4 outpos.z, projection[2], r8
	dp4 outpos.w, projection[3], r8

	; outclr = r9
	mov outclr, r9
.end
